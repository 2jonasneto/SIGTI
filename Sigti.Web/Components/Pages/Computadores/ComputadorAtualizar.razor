@using Sigti.Application
@using Sigti.Application.Base
@using Sigti.Application.DTO
@using Sigti.Application.Interfaces
@inject ISnackbar Snackbar
@inject ICommandHandler<AtualizarComputadorCommand> Handler
@inject ILocalizacaoQueryHandler local
@inject ISetorQueryHandler setor
<MudDialog TitleClass="titleclass">
    <TitleContent>
        <MudText Typo="Typo.h6">

            Atualizar @Computador.HostName
        </MudText>
    </TitleContent>
    <DialogContent>
        <EditForm @ref=form Model=Computador OnValidSubmit="Salvar">
            <DataAnnotationsValidator />
            <MudGrid>
                <MudItem xs="4">
                <MudTextField  @bind-Value="@Computador.HostName" Label="Nome do Host" For="@(() => Computador.HostName)" />
                </MudItem>
                 <MudItem xs="4">
                <MudSelect xs Label="Localização" Text=" " @bind-Value="@Computador.LocalizacaoId">
                    @foreach (var item in Localidades)
                    {
                        <MudSelectItem Value=@item.Id>@item.Nome</MudSelectItem>

                    }
                </MudSelect>
                </MudItem>
                 <MudItem xs="4">
                <MudSelect Label="Setor" Text=" " @bind-Value="@Computador.SetorId">
                    @foreach (var item in Setores.Where(x => x.LocalizacaoId == Computador.LocalizacaoId))
                    {
                        <MudSelectItem Value=@item.Id>@item.Nome</MudSelectItem>

                    }
                </MudSelect>
                </MudItem>
                <MudItem xs="4">
                    <MudTextField @bind-Value="@Computador.Processador" Label="Processador" For="@(() => Computador.Processador)" />
                </MudItem>
               
                <MudItem xs="4">
                    <MudTextField @bind-Value="@Computador.Memoria" Label="Memória" For="@(() => Computador.Memoria)" />
                </MudItem>

                <MudItem xs="4">
                    <MudTextField @bind-Value="@Computador.Disco" Label="Discos" For="@(() => Computador.Disco)" />
                </MudItem>

                <MudItem xs="4">
                    <MudTextField @bind-Value="@Computador.Ip" Label="Ip" For="@(() => Computador.Ip)" />
                </MudItem>

               <MudItem xs="4">
                    <MudTextField @bind-Value="@Computador.Anydesk" Label="Anydesk" For="@(() => Computador.Anydesk)" />

                </MudItem>

               <MudItem xs="4">
                    <MudTextField @bind-Value="@Computador.Patrimonio" Label="Patrimônio" For="@(() => Computador.Patrimonio)" />
                </MudItem>

               <MudItem xs="6">
                    <MudTextField @bind-Value="@Computador.SistemaOperacional" Label="Sistema" For="@(() => Computador.SistemaOperacional)" />
                </MudItem>
                <MudItem xs="6">
                    <MudTextField @bind-Value="@Computador.Grupos" Label="Grupos" For="@(() => Computador.Grupos)" />
                </MudItem>

               <MudItem xs="12">
                    <MudTextField @bind-Value="@Computador.Observacao" Label="Observação" For="@(() => Computador.Observacao)" Lines="2" />
                </MudItem>

            
            </MudGrid>


        </EditForm>

    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Tertiary" OnClick="Salvar">Gravar</MudButton>
        <MudButton OnClick="Cancel">Cancelar</MudButton>
    </DialogActions>

</MudDialog>
@code {

    EditForm form;

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public AtualizarComputadorCommand Computador { get; set; } = new();
    [Parameter] public List<LocalizacaoDTO> Localidades { get; set; } = new();
    [Parameter] public List<SetorDTO> Setores { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {

        //  Setores = (await setor.ListaSetores()).ToList();
        //Localidades = (await local.ListaLocalizacoes()).ToList();
    }
    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task Salvar()
    {

        if (form.EditContext.Validate())
        {
            Computador.UltimoUsuarioLogado = "";
            Computador.ModificadoPor = "SYSTEM";
            GenericCommandResult r = (GenericCommandResult)await Handler.Execute(Computador);
            if (r.Success)
            {
                Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
                //In a real world scenario this bool would probably be a service to delete the item from api/database
                Snackbar.Add($"Setor {Computador.HostName} atualizada!", Severity.Success);
                MudDialog.Close(DialogResult.Ok(""));
            }
            else
            {
                string notes = "\n\n";
                foreach (var item in r.Data)
                {
                    notes += item.Message + "\n";
                }

                Snackbar.Add(r.Message + notes, Severity.Error);
                MudDialog.Close(DialogResult.Ok(""));
            }

        }
    }
}