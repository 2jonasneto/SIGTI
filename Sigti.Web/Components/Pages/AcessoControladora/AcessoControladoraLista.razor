@page "/seguranca/acessos"


@using Sigti.Application
@using Sigti.Application.DTO
@using Sigti.Application.Interfaces
@inject IAcessoControladoraQueryHandler Query
@inject IDialogService DialogService
@inject ILocalizacaoQueryHandler local
@inject ISetorQueryHandler setor
@inject IControladoraQueryHandler control
@inject ISnackbar Snackbar

<h4>Lista de Acesso as Controladoras</h4>
<MudDivider />

<br />
<MudButton Disabled="@authAdd" Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="@((e) => Adicionar())">Adicionar Novo</MudButton>
<br />
<br />

<MudDataGrid Items="@AcessoControladoras" Striped="true" Bordered="true" Dense="true" FilterCaseSensitivity=DataGridFilterCaseSensitivity.CaseInsensitive
             Filterable="true" HeaderClass="title-gridclass" RowsPerPage="25">
    <Columns>


        <PropertyColumn Property="x => x.Nome" Title="Nome" CellStyle="width: 50%;" />
        <PropertyColumn Property="x => x.DigitalId" Title="Id" CellStyle="width: 100%;" />
        <PropertyColumn Property="x => x.Observacao" Title="Observação" CellStyle="width: 100%;" />
        <PropertyColumn Property="x => x.Localizacao" Title="Localidade" CellStyle="width: 100%;" />
        <PropertyColumn Property="x => x.Setor" Title="Setor" CellStyle="width: 100%;" />

        <PropertyColumn Property="x => x.DataModificacao" Title="Última atualização" CellStyle="width: 100%;" />
        <TemplateColumn Title="Ações" Filterable="false" Sortable="false">
            <CellTemplate>
                <MudStack Row>
                    <MudIconButton Disabled=@(context.Item.Nome=="MATRIZ") Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Tertiary" Icon="@Icons.Material.Filled.Edit" OnClick="@((e) => Atualizar(context.Item))"></MudIconButton>
                    <MudIconButton Disabled=@(context.Item.Nome=="MATRIZ") Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Error" Icon="@Icons.Material.Filled.Delete" OnClick="@((e) => Remover(context.Item))"></MudIconButton>
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="ListaAcessoControladoraGridDTO" />
    </PagerContent>
</MudDataGrid>
@code {
    private bool authAdd = false;
    private IEnumerable<ListaAcessoControladoraGridDTO> AcessoControladoras = new List<ListaAcessoControladoraGridDTO>();
    [Parameter] public List<LocalizacaoDTO> Localidades { get; set; } = new();
    [Parameter] public List<SetorDTO> Setores { get; set; } = new();
    [Parameter] public List<ControladoraDTO> Controladoras { get; set; } = new();
    protected override async Task OnInitializedAsync()
    {
        Program.siteMap = "Segurança / Digitais ";


        await Loading(); 
        if (Controladoras.Count==0)
        {
            authAdd = true;
            Snackbar.Add("Somente é permitido adicionar acessos quando existem controladoras cadastradas. Favor realizar previamente o cadastro das controladoras", Severity.Error);
        }
    }
    async Task Loading()
    {
        AcessoControladoras = await Query.GridAcessoControladoras();
        Setores = (await setor.ListaSetores()).ToList();
        Localidades = (await local.ListaLocalizacoes()).ToList();
        Controladoras = (await control.ListaControladoras()).ToList();

    }
    async Task Adicionar()
    {
        var options = new DialogOptions { ClassBackground = "blurryWindow", FullWidth = true, DisableBackdropClick = true };
        var dialog = await DialogService.ShowAsync<AcessoControladoraAdicionar>("Adicionar Novo", options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await Loading();
            //In a real world scenario we would reload the data from the source here since we "removed" it in the dialog already.
            //  Guid.TryParse(result.Data.ToString(), out Guid deletedServer);
            //    Servers.RemoveAll(item => item.Id == deletedServer);
        }
    }
    async Task Atualizar(ListaAcessoControladoraGridDTO dto)
    {
        var upd = new AtualizarAcessoControladoraCommand(dto.Id, dto.Nome, dto.Observacao, dto.ModificadoPor, dto.LocalizacaoId, dto.SetorId,dto.DigitalId,dto.ControladoraId);
        var parameters = new DialogParameters<AcessoControladoraAtualizar>
        {
            { x=>x.AcessoControladora,upd} ,
            { s => s.Setores, Setores },
            { l => l.Localidades, Localidades },
            { c => c.Controladoras, Controladoras }
        };
        var options = new DialogOptions { ClassBackground = "blurryWindow", FullWidth = true, DisableBackdropClick = true };
        var dialog = await DialogService.ShowAsync<AcessoControladoraAtualizar>("Atualizar", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await Loading();
            //In a real world scenario we would reload the data from the source here since we "removed" it in the dialog already.
            //  Guid.TryParse(result.Data.ToString(), out Guid deletedServer);
            //    Servers.RemoveAll(item => item.Id == deletedServer);
        }
    }
    async Task Remover(ListaAcessoControladoraGridDTO dto)
    {
        var upd = new RemoverAcessoControladoraCommand(dto.Id, dto.Nome);
        var parameters = new DialogParameters<AcessoControladoraRemover> { { x => x.AcessoControladora, upd } };
        var options = new DialogOptions { ClassBackground = "blurryWindow", FullWidth = true };
        var dialog = await DialogService.ShowAsync<AcessoControladoraRemover>("Remover", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await Loading();
            //In a real world scenario we would reload the data from the source here since we "removed" it in the dialog already.
            //  Guid.TryParse(result.Data.ToString(), out Guid deletedServer);
            //    Servers.RemoveAll(item => item.Id == deletedServer);
        }
    }
}