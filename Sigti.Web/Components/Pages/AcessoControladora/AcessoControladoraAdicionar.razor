@using Sigti.Application
@using Sigti.Application.DTO
@using Sigti.Application.Interfaces
@using Sigti.Application.Base
@inject ISnackbar Snackbar
@inject ICommandHandler<AdicionarAcessoControladoraCommand> Handler
@inject ISetorQueryHandler setor
@inject ILocalizacaoQueryHandler local
@inject IControladoraQueryHandler control
<MudDialog TitleClass="titleclass">
    <TitleContent>
        <MudText Typo="Typo.h6">

            Adicionar Novo
        </MudText>
    </TitleContent>
    <DialogContent>
        <EditForm @ref=form Model=AcessoControladora OnValidSubmit="Salvar">
            <DataAnnotationsValidator />

            <MudTextField @bind-Value="@AcessoControladora.Nome" Label="Nome" For="@(() => AcessoControladora.Nome)" />
            <MudTextField @bind-Value="@AcessoControladora.DigitalId" Label="Id"  />
            <MudTextField @bind-Value="@AcessoControladora.Observacao" Label="Observação"  />

            <MudSelect Label="Controladora" Text=" " @bind-Value="@AcessoControladora.ControladoraId">
                @foreach (var item in Controladoras)
                {
                    <MudSelectItem Value=@item.Id>@item.Nome</MudSelectItem>

                }
            </MudSelect>

            <MudSelect Label="Localização" Text=" " @bind-Value="@AcessoControladora.LocalizacaoId">
                @foreach (var item in Localidades)
                {
                    <MudSelectItem Value=@item.Id>@item.Nome</MudSelectItem>

                }
            </MudSelect>


            <MudSelect Label="Setor" Text=" " @bind-Value="@AcessoControladora.SetorId">
                @foreach (var item in Setores.Where(x => x.LocalizacaoId == AcessoControladora.LocalizacaoId))
                {
                    <MudSelectItem Value=@item.Id>@item.Nome</MudSelectItem>

                }
            </MudSelect>


        </EditForm>

    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Tertiary" OnClick="Salvar">Gravar</MudButton>
        <MudButton OnClick="Cancel">Cancelar</MudButton>
    </DialogActions>
</MudDialog>
@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    EditForm form;
    [Parameter] public AdicionarAcessoControladoraCommand AcessoControladora { get; set; } = new();
    public List<SetorDTO> Setores { get; set; } = new();
    public List<LocalizacaoDTO> Localidades { get; set; } = new();
    public List<ControladoraDTO> Controladoras { get; set; } = new();
    private void Cancel()
    {
        MudDialog.Cancel();
    }

    protected override async Task OnInitializedAsync()
    {
        Localidades = (await local.ListaLocalizacoes()).ToList();
        Setores = (await setor.ListaSetores()).ToList();
        Controladoras = (await control.ListaControladoras ()).ToList();
    }
    private async Task Salvar()
    {
        if (form.EditContext.Validate())
        {
            AcessoControladora.ModificadoPor = "SYSTEM";
            GenericCommandResult r = (GenericCommandResult)await Handler.Execute(AcessoControladora);
            //In a real world scenario this bool would probably be a service to delete the item from api/database
            if (r.Success)
            {
                Snackbar.Add("AcessoControladora adicionada!", Severity.Success);
                MudDialog.Close(DialogResult.Ok(""));
            }
            else
            {
                string notes = "\n\n";
                foreach (var item in r.Data)
                {
                    notes += item.Message + "\n";
                }

                Snackbar.Add(r.Message + notes, Severity.Error);
                MudDialog.Close(DialogResult.Ok(""));
            }

        }

    }
}