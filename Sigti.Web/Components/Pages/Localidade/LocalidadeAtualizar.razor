@using Sigti.Application
@using Sigti.Application.Interfaces
@inject ISnackbar Snackbar
@inject ICommandHandler<AtualizarLocalizacaoCommand> Handler
<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">

            Atualizar @Localidade.Nome
        </MudText>
    </TitleContent>
    <DialogContent>
        <EditForm Model=Localidade OnValidSubmit="Salvar">
            <DataAnnotationsValidator />

            <MudTextField @bind-Value="@Localidade.Nome" Variant="Variant.Outlined" Label="Nome" For="@(() => Localidade.Nome)" />
            <MudTextField @bind-Value="@Localidade.Descricao" Variant="Variant.Outlined" Label="Descrição" Lines="2" />

            <br />
            <MudCardActions>
                <MudButton Class="me-3" Variant=Variant.Filled Color="Color.Tertiary" ButtonType="ButtonType.Submit">Gravar</MudButton>
                <MudButton Variant=Variant.Filled OnClick="Cancel">Cancelar</MudButton>

            </MudCardActions>
        </EditForm>

    </DialogContent>

</MudDialog>
@code {
    MudForm form;
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public AtualizarLocalizacaoCommand Localidade { get; set; } = new();

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task Salvar()
    {


        Localidade.ModificadoPor = "SYSTEM";
        var r = await Handler.Execute(Localidade);
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
        //In a real world scenario this bool would probably be a service to delete the item from api/database
        Snackbar.Add($"Localidade {Localidade.Nome} atualizada!", Severity.Success);
        MudDialog.Close(DialogResult.Ok(""));

    }
}