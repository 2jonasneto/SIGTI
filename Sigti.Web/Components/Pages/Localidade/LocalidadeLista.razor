@page "/localidade/lista"


@using Sigti.Application
@using Sigti.Application.DTO
@using Sigti.Application.Interfaces
@inject ILocalizacaoQueryHandler Query
@inject IDialogService DialogService

<h4>Lista de Localidades</h4>
<MudDivider/>

<br />
<MudButton Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="@((e) => Adicionar())">Adicionar Novo</MudButton>
<br /> 
<br /> 

<MudDataGrid Items="@Localizacoes" Striped="true" Bordered="true" Dense="true" Filterable="true" HeaderClass="title-gridclass" RowsPerPage="25">
    <Columns>
       

        <PropertyColumn Property="x => x.Nome" Title="Nome" CellStyle="width: 50%;"  />
        <PropertyColumn Property="x => x.Descricao" Title="Descrição" CellStyle="width: 100%;" />
        <PropertyColumn Property="x => x.DataModificacao" Title="Última atualização" CellStyle="width: 100%;" />
        <TemplateColumn CellStyle="float: right;" Title="Ações" Filterable="false" Sortable="false">
            <CellTemplate >
                <MudStack Row >
                    <MudIconButton Disabled=@(context.Item.Nome=="MATRIZ") Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Tertiary" Icon="@Icons.Material.Filled.Edit" OnClick="@((e) => Atualizar(context.Item))"></MudIconButton>
                    <MudIconButton Disabled=@(context.Item.Nome=="MATRIZ") Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Error" Icon="@Icons.Material.Filled.Delete" OnClick="@((e) => Remover(context.Item))"></MudIconButton>
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="ListaLocalizacaoGridDTO" />
    </PagerContent>
</MudDataGrid>
@code {
    private IEnumerable<LocalizacaoDTO> Localizacoes = new List<LocalizacaoDTO>();

    protected override async Task OnInitializedAsync()
    {
       
        await Loading();
    }
    async Task Loading()
    {
        Localizacoes = await Query.ListaLocalizacoes();

    }
    async Task Adicionar()
    {
        var options = new DialogOptions { ClassBackground = "blurryWindow", FullWidth=true };
        var dialog = await DialogService.ShowAsync<LocalidadeAdicionar>("Adicionar Novo",options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await Loading();
            //In a real world scenario we would reload the data from the source here since we "removed" it in the dialog already.
            //  Guid.TryParse(result.Data.ToString(), out Guid deletedServer);
            //    Servers.RemoveAll(item => item.Id == deletedServer);
        }
    }
    async Task Atualizar(LocalizacaoDTO dto)
    {
        var upd = new AtualizarLocalizacaoCommand(dto.Id,dto.Nome, dto.Descricao, dto.ModificadoPor);
        var parameters = new DialogParameters<LocalidadeAtualizar> { { x=>x.Localidade,upd} };
        var options = new DialogOptions { ClassBackground = "blurryWindow", FullWidth = true };
        var dialog = await DialogService.ShowAsync<LocalidadeAtualizar>("Atualizar",parameters,options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await Loading();
            //In a real world scenario we would reload the data from the source here since we "removed" it in the dialog already.
            //  Guid.TryParse(result.Data.ToString(), out Guid deletedServer);
            //    Servers.RemoveAll(item => item.Id == deletedServer);
        }
    }
    async Task Remover(LocalizacaoDTO dto)
    {
        var upd = new RemoverLocalizacaoCommand(dto.Id, dto.Nome);
        var parameters = new DialogParameters<LocalidadeRemover> { { x => x.Localidade, upd } };
        var options = new DialogOptions { ClassBackground = "blurryWindow", FullWidth = true };
        var dialog = await DialogService.ShowAsync<LocalidadeRemover>("Remover", parameters,options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await Loading();
            //In a real world scenario we would reload the data from the source here since we "removed" it in the dialog already.
            //  Guid.TryParse(result.Data.ToString(), out Guid deletedServer);
            //    Servers.RemoveAll(item => item.Id == deletedServer);
        }
    }
}